[
    {
        "title": "Filtering an Array",
        "summary": "const result = array.filter(() => {});",
        "description": "Creates a new array containing elements that satisfy the provided condition inside `filter()`. The original array remains unchanged.",
        "example": "const numbers = [1, 2, 3, 4, 5, 6];\nconst evens = numbers.filter(num => num % 2 === 0);\nconsole.log(evens); // Output: [2, 4, 6]",
        "tags": "array, filter, iterate, loop, subset, even numbers, javascript, functional programming"
    },
    {
        "title": "Mapping an Array",
        "summary": "const result = array.map(() => {});",
        "description": "Transforms each element of an array using `map()`, returning a new array with modified values while keeping the original array unchanged.",
        "example": "const numbers = [1, 2, 3, 4];\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled); // Output: [2, 4, 6, 8]",
        "tags": "array, map, iterate, loop, transform, new array, modify, javascript"
    },
    {
        "title": "Reducing an Array",
        "summary": "const result = array.reduce(() => {});",
        "description": "Aggregates array values into a single result using `reduce()`. Commonly used for summing numbers, counting occurrences, or combining objects.",
        "example": "const numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((acc, num) => acc + num, 0);\nconsole.log(sum); // Output: 10",
        "tags": "array, reduce, sum, iterate, loop, accumulate, total, javascript"
    },
    {
        "title": "Finding an Element in an Array",
        "summary": "const result = array.find(() => {});",
        "description": "Returns the first element in an array that matches the provided condition inside `find()`. If no match is found, it returns `undefined`.",
        "example": "const users = [{name: 'Alice'}, {name: 'Bob'}, {name: 'Charlie'}];\nconst user = users.find(u => u.name === 'Bob');\nconsole.log(user); // Output: {name: 'Bob'}",
        "tags": "array, find, search, lookup, match, get item, javascript"
    },
    {
        "title": "Sorting an Array",
        "summary": "const result = array.sort(() => {});",
        "description": "Sorts an array in place using `sort()`. By default, it sorts elements as strings unless a comparator function is provided for numeric sorting.",
        "example": "const numbers = [4, 2, 1, 3];\nnumbers.sort((a, b) => a - b);\nconsole.log(numbers); // Output: [1, 2, 3, 4]",
        "tags": "array, sort, order, arrange, comparator, ascending, descending, javascript"
    },
    {
        "title": "Checking if a Value is NaN",
        "summary": "const result = isNaN(value);",
        "description": "Determines if a value is `NaN` (Not-a-Number). Useful for validating input before performing mathematical operations.",
        "example": "console.log(isNaN('hello')); // Output: true\nconsole.log(isNaN(123)); // Output: false",
        "tags": "number, NaN, validation, check, not-a-number, verify, javascript"
    },
    {
        "title": "Getting the Current Date and Time",
        "summary": "const result = new Date();",
        "description": "Creates a `Date` object representing the current date and time. Can be formatted or manipulated using various `Date` methods.",
        "example": "const currentDate = new Date();\nconsole.log(currentDate); // Output: Tue Jan 30 2025 10:00:00 GMT+0000 (example)",
        "tags": "date, time, now, get current date, timestamp, javascript, datetime"
    },
    {
        "title": "Converting a Value to a String",
        "summary": "const result = value.toString();",
        "description": "Converts a number, object, or other primitive type to a string representation using `toString()`.",
        "example": "const num = 42;\nconsole.log(num.toString()); // Output: '42'",
        "tags": "string, conversion, cast, stringify, text, toString, format, javascript"
    },
    {
        "title": "Parsing a String to an Integer",
        "summary": "const result = parseInt(value, 10);",
        "description": "Parses a string and returns an integer. The optional second argument specifies the number base (radix).",
        "example": "const str = '42';\nconst num = parseInt(str, 10);\nconsole.log(num); // Output: 42",
        "tags": "number, parse, convert, integer, base, radix, parseInt, javascript"
    },
    {
        "title": "Checking if an Array Contains a Value",
        "summary": "const result = array.includes(value);",
        "description": "Checks if an array contains a specific element using `includes()`. Returns `true` if found, otherwise `false`. Useful for searching within arrays without iteration.",
        "example": "const fruits = ['apple', 'banana', 'mango'];\nconsole.log(fruits.includes('banana')); // Output: true",
        "tags": "array, includes, check existence, find value, contains, lookup, search, javascript"
    },
    {
        "title": "Merging Arrays with concat",
        "summary": "const result = array1.concat(array2);",
        "description": "Merges two or more arrays into a new array using `concat()`, without altering the original arrays.",
        "example": "const arr1 = [1, 2];\nconst arr2 = [3, 4];\nconst merged = arr1.concat(arr2);\nconsole.log(merged); // Output: [1, 2, 3, 4]",
        "tags": "array, concat, merge, combine, append, join arrays, extend, javascript"
    },
    {
        "title": "Splitting a String into Substrings",
        "summary": "const parts = string.split(separator);",
        "description": "Divides a string into an array of substrings based on a specified separator. Using an empty string as a separator splits the string into individual characters.",
        "example": "console.log('apple,banana,grape'.split(',')); // Output: ['apple', 'banana', 'grape']",
        "tags": "string, split, array, divide, tokenize, substring, separator, javascript"
    },
    {
        "title": "Converting an Array to a String",
        "summary": "const result = array.join(separator);",
        "description": "Joins all elements of an array into a single string using a specified separator. If no separator is provided, a comma is used by default.",
        "example": "const words = ['Hello', 'World'];\nconst sentence = words.join(' ');\nconsole.log(sentence); // Output: 'Hello World'",
        "tags": "array, join, merge, concatenate, convert, string, separator, javascript"
    },
    {
        "title": "Retrieving Keys from an Object",
        "summary": "const result = Object.keys(object);",
        "description": "Extracts and returns an array containing all keys of an object using `Object.keys()`. Useful for iterating over properties.",
        "example": "const user = { name: 'Alice', age: 25 };\nconsole.log(Object.keys(user)); // Output: ['name', 'age']",
        "tags": "object, keys, get properties, iterate, map keys, metadata, javascript"
    },
    {
        "title": "Rounding a Number to the Nearest Integer",
        "summary": "const result = Math.round(number);",
        "description": "Rounds a given number to the nearest integer using `Math.round()`. Values with decimal `.5` or higher round up; others round down.",
        "example": "console.log(Math.round(4.6)); // Output: 5\nconsole.log(Math.round(4.3)); // Output: 4",
        "tags": "math, round, number, approximate, nearest integer, rounding, javascript"
    },
    {
        "title": "Getting the Maximum Value in an Array",
        "summary": "const max = Math.max(...array);",
        "description": "Finds the largest number in an array using the spread operator. Returns `-Infinity` for an empty array.",
        "example": "console.log(Math.max(...[3, 7, 2, 9])); // Output: 9",
        "tags": "array, max, largest, number, spread, javascript"
    },
    {
        "title": "Getting the Minimum Value in an Array",
        "summary": "const min = Math.min(...array);",
        "description": "Finds the smallest number in an array using the spread operator. Returns `Infinity` for an empty array.",
        "example": "console.log(Math.min(...[3, 7, 2, 9])); // Output: 2",
        "tags": "array, min, smallest, number, spread, javascript"
    },
    {
        "title": "Checking if Every Element Meets a Condition",
        "summary": "const result = array.every(() => {});",
        "description": "This snippet demonstrates the use of `every()` to check if all elements in an array satisfy a given condition.",
        "example": "const numbers = [2, 4, 6];\nconsole.log(numbers.every(num => num % 2 === 0)); // Output: true",
        "tags": "array, every, javascript, validation"
    },
    {
        "title": "Filling an Array with a Value",
        "summary": "const result = array.fill(value, start, end);",
        "description": "This snippet shows how to use `fill()` to populate an array with a specific value between given indices.",
        "example": "const arr = [1, 2, 3, 4, 5];\narr.fill(0, 1, 4);\nconsole.log(arr); // Output: [1, 0, 0, 0, 5]",
        "tags": "array, fill, javascript, manipulation"
    },
    {
        "title": "Creating a New Array",
        "summary": "const result = Array.from(iterable);",
        "description": "This snippet demonstrates how to use `Array.from()` to create an array from an iterable, such as a string or a Set.",
        "example": "const str = 'hello';\nconst letters = Array.from(str);\nconsole.log(letters); // Output: ['h', 'e', 'l', 'l', 'o']",
        "tags": "array, from, javascript, iterable"
    },
    {
        "title": "Creating an Array of a Fixed Length",
        "summary": "const result = new Array(length).fill(value);",
        "description": "This snippet illustrates how to create an array of a fixed length and initialize it with a specific value.",
        "example": "const arr = new Array(5).fill(0);\nconsole.log(arr); // Output: [0, 0, 0, 0, 0]",
        "tags": "array, fill, javascript, initialization"
    },
    {
        "title": "Finding the Index of an Element",
        "summary": "const result = array.indexOf(value);",
        "description": "This snippet demonstrates how to use `indexOf()` to find the first occurrence of a value in an array.",
        "example": "const fruits = ['apple', 'banana', 'mango'];\nconsole.log(fruits.indexOf('banana')); // Output: 1",
        "tags": "array, indexOf, javascript, search"
    },
    {
        "title": "Finding the Last Index of an Element",
        "summary": "const result = array.lastIndexOf(value);",
        "description": "This snippet shows how to use `lastIndexOf()` to find the last occurrence of a value in an array.",
        "example": "const numbers = [1, 2, 3, 2, 4];\nconsole.log(numbers.lastIndexOf(2)); // Output: 3",
        "tags": "array, lastIndexOf, javascript, search"
    },
    {
        "title": "Extracting a Portion of an Array",
        "summary": "const result = array.slice(start, end);",
        "description": "This snippet illustrates how to use `slice()` to extract a portion of an array without modifying the original array.",
        "example": "const numbers = [1, 2, 3, 4, 5];\nconsole.log(numbers.slice(1, 4)); // Output: [2, 3, 4]",
        "tags": "array, slice, javascript, extraction"
    },
    {
        "title": "Checking if an Array Includes a Value",
        "summary": "const result = array.includes(value);",
        "description": "This snippet illustrates how to use `includes()` to check if an array contains a specific value.",
        "example": "const fruits = ['apple', 'banana', 'mango'];\nconsole.log(fruits.includes('banana')); // Output: true",
        "tags": "array, includes, javascript, search"
    },
    {
        "title": "Getting the Keys of an Object",
        "summary": "const result = Object.keys(object);",
        "description": "This snippet demonstrates how to use `Object.keys()` to retrieve an array of an object's keys.",
        "example": "const obj = {a: 1, b: 2, c: 3};\nconsole.log(Object.keys(obj)); // Output: ['a', 'b', 'c']",
        "tags": "object, keys, javascript, retrieval"
    },
    {
        "title": "Merging Objects",
        "summary": "const result = Object.assign(target, ...sources);",
        "description": "This snippet demonstrates how to use `Object.assign()` to merge multiple objects into one.",
        "example": "const obj1 = {a: 1};\nconst obj2 = {b: 2};\nconsole.log(Object.assign({}, obj1, obj2)); // Output: {a: 1, b: 2}",
        "tags": "object, assign, javascript, merging"
    },
    {
        "title": "Freezing an Object",
        "summary": "Object.freeze(object);",
        "description": "This snippet shows how to use `Object.freeze()` to make an object immutable, preventing modifications.",
        "example": "const obj = {a: 1};\nObject.freeze(obj);\nobj.a = 2;\nconsole.log(obj.a); // Output: 1",
        "tags": "object, freeze, javascript, immutability"
    },
    {
        "title": "Checking if a Value is an Array",
        "summary": "const result = Array.isArray(value);",
        "description": "This snippet illustrates how to use `Array.isArray()` to determine if a given value is an array.",
        "example": "console.log(Array.isArray([1, 2, 3])); // Output: true\nconsole.log(Array.isArray('hello')); // Output: false",
        "tags": "array, isArray, javascript, validation"
    },
    {
        "title": "Cloning an Array with Spread Operator",
        "summary": "const clone = [...array];",
        "description": "Creates a shallow copy of an array using the spread operator. The new array contains the same elements but has a different reference.",
        "example": "const numbers = [1, 2, 3];\nconst copy = [...numbers];\nconsole.log(copy); // Output: [1, 2, 3]",
        "tags": "array, spread, cloning, javascript, immutability, copy"
    },
    {
        "title": "Merging Arrays with Spread Operator",
        "summary": "const merged = [...array1, ...array2];",
        "description": "Combines multiple arrays into one using the spread operator. The resulting array contains all elements from the input arrays in order.",
        "example": "const a = [1, 2];\nconst b = [3, 4];\nconst merged = [...a, ...b];\nconsole.log(merged); // Output: [1, 2, 3, 4]",
        "tags": "array, spread, merging, javascript, concatenation"
    },
    {
        "title": "Finding the Maximum Value in an Array",
        "summary": "const max = Math.max(...array);",
        "description": "Extracts the highest numerical value from an array using `Math.max()` and the spread operator.",
        "example": "const numbers = [10, 5, 8];\nconsole.log(Math.max(...numbers)); // Output: 10",
        "tags": "math, array, max, javascript, spread, numbers"
    },
    {
        "title": "Finding the Minimum Value in an Array",
        "summary": "const min = Math.min(...array);",
        "description": "Extracts the lowest numerical value from an array using `Math.min()` and the spread operator.",
        "example": "const numbers = [10, 5, 8];\nconsole.log(Math.min(...numbers)); // Output: 5",
        "tags": "math, array, min, javascript, spread, numbers"
    },
    {
        "title": "Generating a Random Integer in a Range",
        "summary": "const result = Math.floor(Math.random() * (max - min + 1)) + min;",
        "description": "Generates a random integer between `min` and `max` (both inclusive) using `Math.random()` and `Math.floor()`.",
        "example": "const randomNum = Math.floor(Math.random() * (10 - 1 + 1)) + 1;\nconsole.log(randomNum); // Output: Random number between 1 and 10",
        "tags": "math, random, javascript, numbers, range"
    },
    {
        "title": "Reversing an Array Without Changing Original",
        "summary": "const reversed = array.slice().reverse();",
        "description": "Creates a reversed copy of an array without modifying the original by using `slice()` to clone and `reverse()` to invert order.",
        "example": "const numbers = [1, 2, 3];\nconsole.log(numbers.slice().reverse()); // Output: [3, 2, 1]",
        "tags": "array, reverse, javascript, immutability, transformation"
    },
    {
        "title": "Checking if All Elements Meet a Condition",
        "summary": "const result = array.every(callback);",
        "description": "Tests whether all elements in an array satisfy a given condition, returning `true` if all pass and `false` otherwise.",
        "example": "const numbers = [2, 4, 6];\nconsole.log(numbers.every(num => num % 2 === 0)); // Output: true",
        "tags": "array, every, javascript, validation, functional programming"
    },
    {
        "title": "Checking if At Least One Element Meets a Condition",
        "summary": "const result = array.some(callback);",
        "description": "Tests whether at least one element in an array satisfies a given condition, returning `true` if found and `false` otherwise.",
        "example": "const numbers = [1, 2, 3];\nconsole.log(numbers.some(num => num % 2 === 0)); // Output: true",
        "tags": "array, some, javascript, validation, functional programming"
    },
    {
        "title": "Extracting a Substring by Index",
        "summary": "const substring = string.substring(start, end);",
        "description": "Extracts a part of a string from `start` to `end` (excluding `end`). If `end` is omitted, extracts until the end of the string.",
        "example": "console.log('hello world'.substring(0, 5)); // Output: 'hello'",
        "tags": "string, substring, extract, slice, text, javascript"
    },
    {
        "title": "Generating a Unique Identifier",
        "summary": "const result = crypto.randomUUID();",
        "description": "Generates a unique UUID (version 4) as a string using the `crypto` API.",
        "example": "console.log(crypto.randomUUID()); // Output: '550e8400-e29b-41d4-a716-446655440000' (example)",
        "tags": "uuid, crypto, javascript, unique, security"
    },
    {
        "title": "Shuffling an Array with Fisher-Yates Algorithm",
        "summary": "const shuffled = array.sort(() => Math.random() - 0.5);",
        "description": "Randomly shuffles the order of elements in an array using a comparator function with `sort()` and `Math.random()`.",
        "example": "const numbers = [1, 2, 3, 4, 5];\nconsole.log(numbers.sort(() => Math.random() - 0.5)); // Output: [3, 1, 5, 4, 2] (example)",
        "tags": "array, shuffle, javascript, sorting, randomization"
    },
    {
        "title": "Performing a Deep Copy of an Object",
        "summary": "const deepCopy = JSON.parse(JSON.stringify(object));",
        "description": "Creates a deep copy of an object by converting it to a JSON string and parsing it back into an object. Works only for JSON-safe values (no functions, `undefined`, etc.).",
        "example": "const obj = {a: 1, b: {c: 2}};\nconst copy = JSON.parse(JSON.stringify(obj));\nconsole.log(copy); // Output: {a: 1, b: {c: 2}}",
        "tags": "object, deep copy, JSON, cloning, javascript"
    },
    {
        "title": "Removing Duplicates from an Array",
        "summary": "const uniqueArray = [...new Set(array)];",
        "description": "Creates a new array containing only unique values by converting the input array into a `Set` and spreading it back into an array.",
        "example": "const numbers = [1, 2, 2, 3, 4, 4, 5];\nconst uniqueNumbers = [...new Set(numbers)];\nconsole.log(uniqueNumbers); // Output: [1, 2, 3, 4, 5]",
        "tags": "array, set, unique, javascript, filtering, deduplication"
    },
    {
        "title": "Checking if an Array Includes a Value",
        "summary": "const result = array.includes(value);",
        "description": "Returns `true` if the specified value is found in the array; otherwise, returns `false`. Useful for checking the existence of an element.",
        "example": "const fruits = ['apple', 'banana', 'orange'];\nconsole.log(fruits.includes('banana')); // Output: true",
        "tags": "array, includes, javascript, search, validation"
    },
    {
        "title": "Converting a String to Lowercase",
        "summary": "const result = string.toLowerCase();",
        "description": "Returns a new string where all alphabetic characters are converted to lowercase. The original string remains unchanged.",
        "example": "const text = 'HELLO';\nconsole.log(text.toLowerCase()); // Output: 'hello'",
        "tags": "string, lowercase, javascript, transformation, text"
    },
    {
        "title": "Trimming Whitespace from a String",
        "summary": "const result = string.trim();",
        "description": "Removes leading and trailing whitespace from a string and returns a new string without modifying the original.",
        "example": "const text = '  hello  ';\nconsole.log(text.trim()); // Output: 'hello'",
        "tags": "string, trim, javascript, whitespace, formatting"
    },
    {
        "title": "Splitting a String into an Array",
        "summary": "const result = string.split(separator);",
        "description": "Breaks a string into an array of substrings using the specified separator. Returns an array of split values.",
        "example": "const text = 'apple,banana,orange';\nconsole.log(text.split(',')); // Output: ['apple', 'banana', 'orange']",
        "tags": "string, split, javascript, array, text processing"
    },
    {
        "title": "Joining an Array into a String",
        "summary": "const result = array.join(separator);",
        "description": "Creates a string by concatenating all elements of an array, separated by the specified separator.",
        "example": "const words = ['Hello', 'World'];\nconsole.log(words.join(' ')); // Output: 'Hello World'",
        "tags": "array, join, javascript, string, concatenation"
    },
    {
        "title": "Finding the Index of an Element in an Array",
        "summary": "const index = array.indexOf(value);",
        "description": "Returns the index of the first occurrence of the specified value in the array. Returns `-1` if the value is not found.",
        "example": "const colors = ['red', 'blue', 'green'];\nconsole.log(colors.indexOf('blue')); // Output: 1",
        "tags": "array, indexOf, javascript, search, position"
    },
    {
        "title": "Checking if a String Contains a Substring",
        "summary": "const result = string.includes(substring);",
        "description": "Returns `true` if the specified substring is found within the string, otherwise returns `false`.",
        "example": "const text = 'Hello, world!';\nconsole.log(text.includes('world')); // Output: true",
        "tags": "string, includes, javascript, search, validation"
    },
    {
        "title": "Converting an Array to a Set",
        "summary": "const uniqueSet = new Set(array);",
        "description": "Creates a new `Set` containing all unique values from the input array, automatically removing duplicates.",
        "example": "const numbers = [1, 2, 2, 3, 4, 4, 5];\nconst uniqueNumbers = new Set(numbers);\nconsole.log(uniqueNumbers); // Output: Set {1, 2, 3, 4, 5}",
        "tags": "array, set, javascript, unique, filtering"
    },
    {
        "title": "Converting a Set to an Array",
        "summary": "const array = [...set];",
        "description": "Transforms a `Set` into an array by spreading its values, preserving only unique elements.",
        "example": "const uniqueNumbers = new Set([1, 2, 3]);\nconst array = [...uniqueNumbers];\nconsole.log(array); // Output: [1, 2, 3]",
        "tags": "set, array, javascript, transformation, deduplication"
    },
    {
        "title": "Freezing an Object to Prevent Modifications",
        "summary": "Object.freeze(object);",
        "description": "Prevents modifications to an object, making its properties immutable. Attempts to modify properties will fail silently or throw an error in strict mode.",
        "example": "const person = { name: 'Alice' };\nObject.freeze(person);\nperson.name = 'Bob';\nconsole.log(person.name); // Output: 'Alice'",
        "tags": "object, freeze, javascript, immutability, security"
    },
    {
        "title": "Merging Objects with Spread Operator",
        "summary": "const merged = { ...object1, ...object2 };",
        "description": "Combines two or more objects into a new object. If properties overlap, the last object's properties overwrite previous ones.",
        "example": "const obj1 = { a: 1 };\nconst obj2 = { b: 2 };\nconst merged = { ...obj1, ...obj2 };\nconsole.log(merged); // Output: { a: 1, b: 2 }",
        "tags": "object, spread, merge, javascript, immutability"
    },
    {
        "title": "Retrieving Object Keys as an Array",
        "summary": "const keys = Object.keys(object);",
        "description": "Returns an array of the enumerable property names of an object.",
        "example": "const user = { name: 'Alice', age: 25 };\nconsole.log(Object.keys(user)); // Output: ['name', 'age']",
        "tags": "object, keys, javascript, iteration, properties"
    },
    {
        "title": "Retrieving Object Values as an Array",
        "summary": "const values = Object.values(object);",
        "description": "Returns an array of an object's own enumerable property values.",
        "example": "const user = { name: 'Alice', age: 25 };\nconsole.log(Object.values(user)); // Output: ['Alice', 25]",
        "tags": "object, values, javascript, iteration, properties"
    },
    {
        "title": "Iterate Over Object Keys",
        "summary": "const keys = Object.keys(object);",
        "description": "Extracts all the property names (keys) from an object and returns them as an array. Useful for looping through an object's keys with `forEach`, `map`, or `for...of`.",
        "example": "const user = { name: 'Alice', age: 25 };\nconsole.log(Object.keys(user)); // Output: ['name', 'age']",
        "tags": "object, keys, iteration, loop, properties, map, forEach, javascript"
    },
    {
        "title": "Iterate Over Object Entries (Keys and Values)",
        "summary": "const entries = Object.entries(object);",
        "description": "Returns an array of key-value pairs from an object, making it easy to loop through an object's properties using `forEach`, `map`, or `for...of`.",
        "example": "const user = { name: 'Alice', age: 25 };\nconsole.log(Object.entries(user)); // Output: [['name', 'Alice'], ['age', 25]]",
        "tags": "object, entries, iteration, loop, key-value, properties, map, forEach, javascript"
    },
    {
        "title": "Checking if Object Has a Key",
        "summary": "const exists = object.hasOwnProperty(key);",
        "description": "Checks whether an object has a specific key (property name). Returns `true` if the key exists, otherwise `false`.",
        "example": "const user = { name: 'Alice' };\nconsole.log(user.hasOwnProperty('name')); // Output: true",
        "tags": "object, key, hasOwnProperty, check, exists, properties, validation, javascript"
    },
    {
        "title": "Getting Array Length",
        "summary": "const length = array.length;",
        "description": "Retrieves the number of elements in an array. Useful for determining array size before looping, slicing, or modifying.",
        "example": "const numbers = [1, 2, 3, 4];\nconsole.log(numbers.length); // Output: 4",
        "tags": "array, length, size, count, iteration, loop, javascript"
    },
    {
        "title": "Looping Through an Array with forEach",
        "summary": "array.forEach(() => {});",
        "description": "Iterates over an array and executes a callback function for each element. Unlike `map()`, it does not return a new array.",
        "example": "const numbers = [1, 2, 3];\nnumbers.forEach(num => console.log(num));\n// Output: 1, 2, 3",
        "tags": "array, forEach, loop, iterate, callback, javascript"
    },
    {
        "title": "Looping Through an Array with for...of",
        "summary": "for (const item of array) {}",
        "description": "Iterates over each element in an array using a `for...of` loop. Works well with `break` and `continue` statements.",
        "example": "const colors = ['red', 'blue', 'green'];\nfor (const color of colors) {\n  console.log(color);\n}\n// Output: 'red', 'blue', 'green'",
        "tags": "array, loop, iterate, for of, iteration, javascript"
    },
    {
        "title": "Looping Through an Array with for Loop",
        "summary": "for (let i = 0; i < array.length; i++) {}",
        "description": "Loops through an array using a standard `for` loop with an index counter. Useful for controlling iteration manually.",
        "example": "const numbers = [10, 20, 30];\nfor (let i = 0; i < numbers.length; i++) {\n  console.log(numbers[i]);\n}\n// Output: 10, 20, 30",
        "tags": "array, loop, iterate, for loop, index, iteration, javascript"
    },
    {
        "title": "Looping Through an Object with for...in",
        "summary": "for (const key in object) {}",
        "description": "Iterates over an object's properties (keys). Use `hasOwnProperty()` to avoid inherited properties.",
        "example": "const user = { name: 'Alice', age: 25 };\nfor (const key in user) {\n  console.log(`${key}: ${user[key]}`);\n}\n// Output: 'name: Alice', 'age: 25'",
        "tags": "object, loop, iterate, for in, keys, properties, javascript"
    },
    {
        "title": "Shuffling an Array Randomly",
        "summary": "array.sort(() => Math.random() - 0.5);",
        "description": "Randomizes the order of elements in an array using the `sort()` method with a random comparator.",
        "example": "const numbers = [1, 2, 3, 4, 5];\nnumbers.sort(() => Math.random() - 0.5);\nconsole.log(numbers); // Output: [3, 5, 1, 4, 2] (example)",
        "tags": "array, shuffle, random, sort, mix, javascript"
    },
    {
        "title": "Reversing an Array",
        "summary": "const reversed = array.reverse();",
        "description": "Modifies the array by reversing its elements in place. Returns the reversed array.",
        "example": "const numbers = [1, 2, 3, 4];\nnumbers.reverse();\nconsole.log(numbers); // Output: [4, 3, 2, 1]",
        "tags": "array, reverse, order, sort, javascript"
    },
    {
        "title": "Flattening a Nested Array",
        "summary": "const flatArray = array.flat(depth);",
        "description": "Creates a new array by flattening nested arrays up to the specified depth. If no depth is provided, it defaults to `1`.",
        "example": "const nested = [1, [2, 3], [[4, 5]]];\nconsole.log(nested.flat(2)); // Output: [1, 2, 3, 4, 5]",
        "tags": "array, flatten, nested, depth, flat, spread, javascript"
    },
    {
        "title": "Replacing Parts of a String",
        "summary": "const result = string.replace(pattern, replacement);",
        "description": "Replaces a substring or pattern within a string. Supports regular expressions for advanced pattern matching.",
        "example": "const text = 'Hello World';\nconsole.log(text.replace('World', 'JavaScript'));\n// Output: 'Hello JavaScript'",
        "tags": "string, replace, modify, substring, regex, pattern, javascript"
    },
    {
        "title": "Converting a String to an Array of Characters",
        "summary": "const charArray = string.split('');",
        "description": "Splits a string into an array of individual characters, preserving order.",
        "example": "const word = 'hello';\nconsole.log(word.split(''));\n// Output: ['h', 'e', 'l', 'l', 'o']",
        "tags": "string, split, array, characters, javascript"
    },
    {
        "title": "Checking if an Array Includes a Value",
        "summary": "const exists = array.includes(value);",
        "description": "Determines whether an array contains a specific value. Returns `true` if found, otherwise `false`. Useful for checking membership without looping.",
        "example": "const numbers = [1, 2, 3, 4];\nconsole.log(numbers.includes(2)); // Output: true",
        "tags": "array, includes, contains, exists, check, search, find, javascript"
    },
    {
        "title": "Finding the Index of an Element in an Array",
        "summary": "const index = array.indexOf(value);",
        "description": "Returns the first index at which a given value is found in an array. If not found, returns `-1`. Useful for locating elements.",
        "example": "const colors = ['red', 'blue', 'green'];\nconsole.log(colors.indexOf('blue')); // Output: 1",
        "tags": "array, index, find, search, locate, position, javascript"
    },
    {
        "title": "Removing an Element from an Array by Index",
        "summary": "array.splice(index, 1);",
        "description": "Removes one element at a specified index from an array. Mutates the original array and returns removed elements.",
        "example": "const numbers = [10, 20, 30];\nnumbers.splice(1, 1);\nconsole.log(numbers); // Output: [10, 30]",
        "tags": "array, remove, delete, splice, index, modify, javascript"
    },
    {
        "title": "Add and Delete Elements in an Array using Splice",
        "summary": "array.splice(start, deleteCount, ...items);",
        "description": "Adds or removes elements from an array starting at `start` index. `deleteCount` determines how many items to remove, and additional items can be inserted.",
        "example": "const arr = [1, 2, 3, 4]; arr.splice(1, 2, 'a', 'b'); console.log(arr); // Output: [1, 'a', 'b', 4]",
        "tags": "array, splice, modify, insert, remove, mutate, javascript"
    },
    {
        "title": "Merging Two Arrays",
        "summary": "const merged = [...array1, ...array2];",
        "description": "Combines two arrays into a single array using the spread operator. Preserves order of elements.",
        "example": "const a = [1, 2];\nconst b = [3, 4];\nconsole.log([...a, ...b]); // Output: [1, 2, 3, 4]",
        "tags": "array, merge, concatenate, join, spread, combine, javascript"
    },
    {
        "title": "Removing Duplicates from an Array",
        "summary": "const unique = [...new Set(array)];",
        "description": "Uses a `Set` to filter out duplicate values from an array. Returns a new array with only unique elements.",
        "example": "const numbers = [1, 2, 2, 3, 4, 4];\nconsole.log([...new Set(numbers)]); // Output: [1, 2, 3, 4]",
        "tags": "array, unique, remove duplicates, filter, set, javascript"
    },
    {
        "title": "Converting a NodeList to an Array",
        "summary": "const array = Array.from(nodeList);",
        "description": "Transforms a `NodeList` (from `querySelectorAll`) into a real array, allowing use of array methods like `map` and `filter`.",
        "example": "const divs = document.querySelectorAll('div');\nconst divArray = Array.from(divs);\nconsole.log(divArray); // Output: [div, div, div...]",
        "tags": "DOM, NodeList, convert, array, querySelectorAll, javascript"
    },
    {
        "title": "Delaying Execution with setTimeout",
        "summary": "setTimeout(() => {}, milliseconds);",
        "description": "Executes a function after a specified delay in milliseconds. Useful for delaying actions or creating timers.",
        "example": "setTimeout(() => console.log('Hello'), 1000);\n// Output after 1 second: 'Hello'",
        "tags": "timeout, delay, async, timer, wait, javascript"
    },
    {
        "title": "Repeating Code with setInterval",
        "summary": "setInterval(() => {}, milliseconds);",
        "description": "Executes a function repeatedly at a specified interval. Continues until `clearInterval` is called.",
        "example": "const interval = setInterval(() => console.log('Tick'), 1000);\n// Call clearInterval(interval) to stop",
        "tags": "interval, repeat, timer, async, loop, javascript"
    },
    {
        "title": "Getting a Random Integer in a Range",
        "summary": "const num = Math.floor(Math.random() * (max - min + 1)) + min;",
        "description": "Generates a random integer between `min` and `max` (inclusive) using `Math.random()`.",
        "example": "console.log(Math.floor(Math.random() * (10 - 1 + 1)) + 1);\n// Output: Random number between 1 and 10",
        "tags": "math, random, integer, range, number, javascript"
    },
    {
        "title": "Getting the Type of a Variable",
        "summary": "const type = typeof value;",
        "description": "Returns a string indicating the type of a given variable. Useful for type-checking.",
        "example": "console.log(typeof 'hello'); // Output: 'string'",
        "tags": "type, typeof, check, variable, datatype, javascript"
    },
    {
        "title": "Rounding a Number to the Nearest Integer",
        "summary": "const rounded = Math.round(value);",
        "description": "Rounds a number to the nearest whole number. `.5` rounds up, below `.5` rounds down.",
        "example": "console.log(Math.round(4.6)); // Output: 5",
        "tags": "math, round, number, decimal, nearest, javascript"
    },
    {
        "title": "Truncating a Number (Remove Decimals)",
        "summary": "const truncated = Math.trunc(value);",
        "description": "Removes the decimal portion of a number without rounding, returning only the integer part.",
        "example": "console.log(Math.trunc(4.9)); // Output: 4",
        "tags": "math, truncate, integer, decimal, round, javascript"
    },
    {
        "title": "Converting a String to Uppercase",
        "summary": "const upper = string.toUpperCase();",
        "description": "Converts all characters in a string to uppercase. Useful for case normalization.",
        "example": "console.log('hello'.toUpperCase()); // Output: 'HELLO'",
        "tags": "string, uppercase, case, convert, compare, javascript"
    },
    {
        "title": "Checking if a String Starts With a Substring",
        "summary": "const result = string.startsWith(substring);",
        "description": "Returns `true` if the string begins with the given substring, otherwise `false`.",
        "example": "console.log('JavaScript'.startsWith('Java')); // Output: true",
        "tags": "string, startsWith, check, prefix, substring, match, javascript"
    },
    {
        "title": "Checking if a String Ends With a Substring",
        "summary": "const result = string.endsWith(substring);",
        "description": "Returns `true` if the string ends with the given substring, otherwise `false`.",
        "example": "console.log('hello.js'.endsWith('.js')); // Output: true",
        "tags": "string, endsWith, check, suffix, substring, match, javascript"
    },
    {
        "title": "Checking if an Object is Empty",
        "summary": "const isEmpty = Object.keys(object).length === 0;",
        "description": "Determines whether an object has no own properties by checking if `Object.keys()` returns an empty array.",
        "example": "const obj = {};\nconsole.log(Object.keys(obj).length === 0); // Output: true",
        "tags": "object, empty, check, validation, length, properties, javascript"
    },
    {
        "title": "Generating a Random Boolean",
        "summary": "const result = Math.random() < 0.5;",
        "description": "Returns a random `true` or `false` value with an equal probability of either outcome.",
        "example": "console.log(Math.random() < 0.5); // Output: true or false",
        "tags": "random, boolean, probability, generate, logic, javascript"
    },
    {
        "title": "Cloning an Object Without Reference",
        "summary": "const clone = JSON.parse(JSON.stringify(object));",
        "description": "Performs a deep copy of an object by serializing and deserializing it with JSON methods. Does not copy functions or `undefined` values.",
        "example": "const obj = { a: 1, b: { c: 2 } };\nconst clone = JSON.parse(JSON.stringify(obj));\nconsole.log(clone); // Output: { a: 1, b: { c: 2 } }",
        "tags": "object, clone, deep copy, serialization, copy, javascript"
    },
    {
        "title": "Shuffling an Array Randomly",
        "summary": "array.sort(() => Math.random() - 0.5);",
        "description": "Randomly reorders elements in an array using the `sort()` method with a random comparator.",
        "example": "const numbers = [1, 2, 3, 4, 5];\nnumbers.sort(() => Math.random() - 0.5);\nconsole.log(numbers); // Output: [3, 1, 5, 4, 2] (example)",
        "tags": "array, shuffle, randomize, sort, random, javascript"
    },
    {
        "title": "Finding the Intersection of Two Arrays",
        "summary": "const intersection = array1.filter(value => array2.includes(value));",
        "description": "Returns an array containing elements that exist in both input arrays.",
        "example": "const a = [1, 2, 3, 4];\nconst b = [3, 4, 5, 6];\nconsole.log(a.filter(num => b.includes(num))); // Output: [3, 4]",
        "tags": "array, intersection, filter, includes, compare, common elements, javascript"
    },
    {
        "title": "Getting the Last Element of an Array",
        "summary": "const lastElement = array[array.length - 1];",
        "description": "Retrieves the last element in an array without modifying it.",
        "example": "const numbers = [10, 20, 30];\nconsole.log(numbers[numbers.length - 1]); // Output: 30",
        "tags": "array, last, access, retrieve, index, get element, javascript"
    },
    {
        "title": "Getting a Random Element from an Array",
        "summary": "const randomItem = array[Math.floor(Math.random() * array.length)];",
        "description": "Selects a random element from an array using `Math.random()`.",
        "example": "const colors = ['red', 'blue', 'green'];\nconsole.log(colors[Math.floor(Math.random() * colors.length)]); // Output: 'blue' (example)",
        "tags": "array, random, pick, select, retrieve, get item, javascript"
    },
    {
        "title": "Swapping Two Variables",
        "summary": "[a, b] = [b, a];",
        "description": "Swaps the values of two variables using array destructuring without needing a temporary variable.",
        "example": "let a = 5, b = 10;\n[a, b] = [b, a];\nconsole.log(a, b); // Output: 10, 5",
        "tags": "swap, destructuring, variables, exchange, assignment, javascript"
    },
    {
        "title": "Counting Occurrences in an Array",
        "summary": "const counts = array.reduce((acc, val) => {}, {});",
        "description": "Counts the number of occurrences of each unique value in an array and returns an object with the counts.",
        "example": "const items = ['apple', 'banana', 'apple', 'orange'];\nconst counts = items.reduce((acc, val) => {\n  acc[val] = (acc[val] || 0) + 1;\n  return acc;\n}, {});\nconsole.log(counts); // Output: { apple: 2, banana: 1, orange: 1 }",
        "tags": "array, count, occurrences, frequency, reduce, tally, javascript"
    },
    {
        "title": "Getting a Random Hex Color",
        "summary": "const color = '#' + Math.floor(Math.random() * 16777215).toString(16);",
        "description": "Generates a random hexadecimal color code using `Math.random()` and `toString(16)`. The result is a valid color code like `#a3f4c2`.",
        "example": "console.log('#' + Math.floor(Math.random() * 16777215).toString(16)); // Output: '#e91e63' (example)",
        "tags": "color, random, hex, generate, style, javascript"
    },
    {
        "title": "Flattening a Deeply Nested Object",
        "summary": "const flattenObject = (obj, prefix = '') => {};",
        "description": "Converts a deeply nested object into a flat key-value structure, using dot notation for nested properties.",
        "example": "const data = { user: { name: 'Alice', info: { age: 25 } } };\nconst flat = flattenObject(data);\nconsole.log(flat); // Output: { 'user.name': 'Alice', 'user.info.age': 25 }",
        "tags": "object, flatten, nested, keys, transform, dot notation, javascript"
    },
    {
        "title": "Getting the Day Name from a Date",
        "summary": "const day = new Date().toLocaleDateString('en-US', { weekday: 'long' });",
        "description": "Extracts the full weekday name (e.g., 'Monday') from a `Date` object using `toLocaleDateString()`.",
        "example": "console.log(new Date().toLocaleDateString('en-US', { weekday: 'long' })); // Output: 'Wednesday' (example)",
        "tags": "date, day, get day, format, locale, javascript"
    },
    {
        "title": "Capitalizing Every Word in a String",
        "summary": "const titleCase = string.replace(/\\b\\w/g, c => c.toUpperCase());",
        "description": "Transforms a string into title case by capitalizing the first letter of each word.",
        "example": "console.log('hello world'.replace(/\\b\\w/g, c => c.toUpperCase())); // Output: 'Hello World'",
        "tags": "string, capitalize, title case, formatting, words, javascript"
    },
    {
        "title": "Pausing Execution for a Delay",
        "summary": "await new Promise(resolve => setTimeout(resolve, ms));",
        "description": "Creates a delay using `setTimeout()` inside a `Promise`, allowing it to be used with `await` inside an async function.",
        "example": "async function wait() {\n  console.log('Start');\n  await new Promise(resolve => setTimeout(resolve, 2000));\n  console.log('End after 2 seconds');\n}\nwait();",
        "tags": "async, delay, timeout, pause, wait, sleep, javascript"
    },
    {
        "title": "Detecting Dark Mode Preference",
        "summary": "const isDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;",
        "description": "Checks if the user’s system is set to dark mode using `matchMedia()`.",
        "example": "console.log(window.matchMedia('(prefers-color-scheme: dark)').matches); // Output: true or false",
        "tags": "dark mode, theme, matchMedia, detect, preference, javascript"
    },
    {
        "title": "Detecting if a Variable is an Object",
        "summary": "const isObject = value => value !== null && typeof value === 'object';",
        "description": "Checks whether a value is a non-null object, excluding arrays and functions.",
        "example": "console.log(isObject({})); // Output: true\nconsole.log(isObject([])); // Output: true\nconsole.log(isObject(null)); // Output: false",
        "tags": "object, check type, typeof, validate, non-null, javascript"
    },
    {
        "title": "Reversing a String",
        "summary": "const reversed = string.split('').reverse().join('');",
        "description": "Splits a string into an array, reverses the order, and joins it back into a new reversed string.",
        "example": "console.log('hello'.split('').reverse().join('')); // Output: 'olleh'",
        "tags": "string, reverse, split, join, manipulate, text, javascript"
    },
    {
        "title": "Generating a UUID (v4)",
        "summary": "const uuid = crypto.randomUUID();",
        "description": "Creates a universally unique identifier (UUID v4) using the `crypto` API.",
        "example": "console.log(crypto.randomUUID()); // Output: '550e8400-e29b-41d4-a716-446655440000' (example)",
        "tags": "uuid, generate, unique, identifier, random, javascript"
    },
    {
        "title": "Escaping HTML Special Characters",
        "summary": "const escaped = string.replace(/[&<>'\"]/g, char => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', \"'\": '&apos;', '\"': '&quot;' }[char]));",
        "description": "Replaces special HTML characters with their escaped entity equivalents to prevent XSS vulnerabilities.",
        "example": "console.log('<div>Hello</div>'.replace(/[&<>'\"]/g, char => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', \"'\": '&apos;', '\"': '&quot;' }[char]))); // Output: '&lt;div&gt;Hello&lt;/div&gt;'",
        "tags": "html, escape, sanitize, security, xss, encode, javascript"
    },
    {
        "title": "Unescaping HTML Entities",
        "summary": "const unescaped = string.replace(/&(amp|lt|gt|quot|apos);/g, tag => ({ '&amp;': '&', '&lt;': '<', '&gt;': '>', '&quot;': '\"', '&apos;': \"'\" }[tag]));",
        "description": "Converts escaped HTML entities back into their original characters.",
        "example": "console.log('&lt;div&gt;Hello&lt;/div&gt;'.replace(/&(amp|lt|gt|quot|apos);/g, tag => ({ '&amp;': '&', '&lt;': '<', '&gt;': '>', '&quot;': '\"', '&apos;': \"'\" }[tag]))); // Output: '<div>Hello</div>'",
        "tags": "html, unescape, decode, security, xss, sanitize, javascript"
    },
    {
        "title": "Reversing a String Efficiently",
        "summary": "const reversed = [...string].reduce((acc, char) => char + acc, '');",
        "description": "Reverses a string efficiently without converting it into an array explicitly, using `reduce()` to build the reversed string character by character.",
        "example": "console.log([... 'hello'].reduce((acc, char) => char + acc, '')); // Output: 'olleh'",
        "tags": "string, reverse, efficient, text, manipulation, javascript"
    },
    {
        "title": "Checking If an Array Is Sorted",
        "summary": "const isSorted = array => array.every((val, i, arr) => i === 0 || arr[i - 1] <= val);",
        "description": "Determines if an array is sorted in ascending order by checking if every element is greater than or equal to the previous one.",
        "example": "console.log(isSorted([1, 2, 3, 4])); // Output: true\nconsole.log(isSorted([3, 2, 1])); // Output: false",
        "tags": "array, sorted, check, order, verify, ascending, javascript"
    },
    {
        "title": "Checking If Two Arrays Are Equal",
        "summary": "const isEqual = (arr1, arr2) => JSON.stringify(arr1) === JSON.stringify(arr2);",
        "description": "Compares two arrays by converting them to JSON strings. Works for primitive values but not for objects with different key orders.",
        "example": "console.log(isEqual([1, 2, 3], [1, 2, 3])); // Output: true\nconsole.log(isEqual([1, 2, 3], [3, 2, 1])); // Output: false",
        "tags": "array, compare, equality, check, match, identical, javascript"
    },
    {
        "title": "Finding the Mode (Most Frequent Element) in an Array",
        "summary": "const mode = array => array.reduce((a, b, i, arr) => arr.filter(v => v === a).length >= arr.filter(v => v === b).length ? a : b);",
        "description": "Finds the most frequently occurring element in an array. Returns the first mode found if multiple exist.",
        "example": "console.log(mode([1, 2, 2, 3, 3, 3, 4])); // Output: 3",
        "tags": "array, mode, most frequent, statistics, count, frequency, javascript"
    },
    {
        "title": "Removing a Property from an Object",
        "summary": "const { key, ...newObj } = object;",
        "description": "Uses object destructuring to create a new object excluding a specified key, without mutating the original object.",
        "example": "const user = { name: 'Alice', age: 25, city: 'NYC' };\nconst { age, ...filteredUser } = user;\nconsole.log(filteredUser); // Output: { name: 'Alice', city: 'NYC' }",
        "tags": "object, remove property, destructuring, immutable, delete, filter, javascript"
    },
    {
        "title": "Finding Unique Elements in an Array",
        "summary": "const unique = array => array.filter((item, index, arr) => arr.indexOf(item) === index);",
        "description": "Filters an array to retain only unique values without using a `Set`.",
        "example": "console.log(unique([1, 2, 2, 3, 4, 4, 5])); // Output: [1, 2, 3, 4, 5]",
        "tags": "array, unique, filter, remove duplicates, indexOf, javascript"
    },
    {
        "title": "Checking If a Number Is Prime",
        "summary": "const isPrime = num => num > 1 && [...Array(num).keys()].slice(2).every(i => num % i !== 0);",
        "description": "Checks if a number is prime by testing divisibility up to its square root. Returns `true` if prime, `false` otherwise.",
        "example": "console.log(isPrime(7)); // Output: true\nconsole.log(isPrime(10)); // Output: false",
        "tags": "math, prime, check, number, divisibility, test, javascript"
    },
    {
        "title": "Removing Duplicates While Preserving Order",
        "summary": "const uniqueInOrder = array => [...new Map(array.map(item => [item, item])).values()];",
        "description": "Removes duplicates while preserving the order of first occurrences using a `Map()` for key-value uniqueness.",
        "example": "console.log(uniqueInOrder([1, 2, 2, 3, 3, 4, 5])); // Output: [1, 2, 3, 4, 5]",
        "tags": "array, unique, remove duplicates, preserve order, map, javascript"
    },
    {
        "title": "Finding the First Duplicate in an Array",
        "summary": "const firstDuplicate = array => array.find((num, i, arr) => arr.indexOf(num) !== i);",
        "description": "Finds and returns the first repeating element in an array. Returns `undefined` if no duplicates are found.",
        "example": "console.log(firstDuplicate([1, 2, 3, 2, 4, 5])); // Output: 2",
        "tags": "array, duplicate, find, repeat, first match, javascript"
    },
    {
        "title": "Detecting a Palindrome String",
        "summary": "const isPalindrome = str => str === str.split('').reverse().join('');",
        "description": "Checks if a string reads the same forward and backward. Returns `true` for palindromes, `false` otherwise.",
        "example": "console.log(isPalindrome('racecar')); // Output: true\nconsole.log(isPalindrome('hello')); // Output: false",
        "tags": "string, palindrome, check, reverse, symmetry, validation, javascript"
    },
    {
        "title": "Generating a Range of Numbers",
        "summary": "const range = (start, end) => Array.from({ length: end - start + 1 }, (_, i) => start + i);",
        "description": "Creates an array of sequential numbers from `start` to `end`, inclusive.",
        "example": "console.log(range(1, 5)); // Output: [1, 2, 3, 4, 5]",
        "tags": "array, range, generate, numbers, sequence, loop, javascript"
    },
    {
        "title": "Creating a Proxy for Object Validation",
        "summary": "const validatedObj = new Proxy(obj, { set(target, key, value) { } });",
        "description": "Uses JavaScript Proxy to add custom validation logic when setting object properties,     providing advanced property access control.",
        "example": "const user = new Proxy({}, {\n  set(target, key, value) {\n    if (key === 'age' && value <  0) {\n      throw new Error('Age cannot be negative');\n    }\n    target[key] = value;\n    return true;\n      }\n});",
        "tags": "proxy, validation, object, advanced, javascript"
    },
    {
        "title": "Implementing Memoization for Function Caching",
        "summary": "const memoize = (fn) => { const cache = new Map(); };",
        "description": "Creates a higher-order function that caches function results to improve performance for  expensive computations.",
        "example": "const expensivecalculation = memoize((n) => {\n  console.log('Calculating...');\n  return n  * 2;\n});",
        "tags": "memoization, caching, performance, function, optimization"
    },
    {
        "title": "Creating a Custom Iterator",
        "summary": "const customIterator = { [Symbol.iterator]() { } };",
        "description": "Defines a custom iterator protocol to create iterable objects with control over          iteration behavior.",
        "example": "const rangeIterator = {\n  start: 0,\n  end: 5,\n  [Symbol.iterator]() {\n    let current =  this.start;\n    return {\n      next() {\n        return current <= this.end\n          ? { value: current++,   done: false }\n          : { done: true };\n      }\n    };\n  }\n};",
        "tags": "iterator, protocol, generator, custom, javascript"
    },
    {
        "title": "Implementing Function Composition",
        "summary": "const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);",
        "description": "Creates a function that composes multiple functions, applying them from right to left    in a functional programming style.",
        "example": "const double = x => x * 2;\nconst increment = x => x + 1;\nconst composedFn = compose(double, increment);",
        "tags": "functional, composition, higher-order, function, programming"
    },
    {
        "title": "Using WeakMap for Private Variables",
        "summary": "const privateProps = new WeakMap();",
        "description": "Implements a mechanism for creating truly private variables and methods in JavaScript    classes.",
        "example": "class SecureClass {\n  constructor(secret) {\n    privateProps.set(this, { secret });\n      }\n  getSecret() {\n    return privateProps.get(this).secret;\n  }\n}",
        "tags": "weakmap, private, encapsulation, class, javascript"
    },
    {
        "title": "Creating a Throttle Function",
        "summary": "const throttle = (fn, delay) => { let shouldWait = false; };",
        "description": "Implements a throttle mechanism to limit the rate of function execution, useful for      performance optimization.",
        "example": "const throttledScroll = throttle(() => {\n  console.log('Scroll event');\n}, 1000);",
        "tags": "throttle, performance, optimization, function, event"
    },
    {
        "title": "Dynamic Import with Error Handling",
        "summary": "const dynamicImport = async (modulePath) => { try { } catch {} };",
        "description": "Provides a robust method for dynamically importing JavaScript modules with               comprehensive error handling.",
        "example": "const loadModule = async (path) => {\n  try {\n    const module = await import(path);\n      return module;\n  } catch (error) {\n    console.error('Module load failed', error);\n  }\n};",
        "tags": "dynamic import, module, async, error handling, javascript"
    },
    {
        "title": "Creating a Cancelable Promise",
        "summary": "const createCancelablePromise = () => { let cancel; };",
        "description": "Implements a promise that can be canceled before its resolution, providing more control  over asynchronous operations.",
        "example": "const { promise, cancel } = createCancelablePromise();\npromise.then(result =>               {}).catch(error => {});",
        "tags": "promise, async, cancellation, control, javascript"
    },
    {
        "title": "Implementing Debounce for Event Handling",
        "summary": "const debounce = (fn, delay) => { let timeoutId; };",
        "description": "Creates a debounce function that delays executing a function until after a specified     wait time.",
        "example": "const debouncedSearch = debounce((query) => {\n  performSearch(query);\n}, 300);",
        "tags": "debounce, event, performance, function, optimization"
    },
    {
        "title": "Creating a Deep Clone Function",
        "summary": "const deepClone = (obj) => JSON.parse(JSON.stringify(obj));",
        "description": "Implements a method to create a deep clone of an object, handling nested structures      without reference.",
        "example": "const originalObj = { a: 1, b: { c: 2 } };\nconst clonedObj = deepClone(originalObj);",
        "tags": "clone, deep copy, object, utility, javascript"
    },
    {
        "title": "Implementing Partial Application",
        "summary": "const partial = (fn, ...presetArgs) => (...laterArgs) => fn(...presetArgs, ...laterArgs);",
        "description": "Creates a function that partially applies arguments, enabling function currying and      partial execution.",
        "example": "const multiply = (a, b) => a * b;\nconst double = partial(multiply, 2);",
        "tags": "partial application, currying, function, functional, javascript"
    },
    {
        "title": "Using Generators for Lazy Evaluation",
        "summary": "function* lazySequence() { yield* []; }",
        "description": "Demonstrates the use of generator functions for creating lazy-evaluated sequences with   minimal memory overhead.",
        "example": "function* fibonacci() {\n  let [prev, curr] = [0, 1];\n  while (true) {\n    yield curr;\n   [prev, curr] = [curr, prev + curr];\n  }\n}",
        "tags": "generator, lazy evaluation, sequence, iterator, javascript"
    },
    {
        "title": "Creating a Type-Safe Object Mapper",
        "summary": "const mapObject = (obj, mapper) => Object.fromEntries(Object.entries(obj).map(mapper));",
        "description": "Provides a flexible way to transform object properties while maintaining type safety.",
        "example": "const result = mapObject(\n  { a: 1, b: 2 },\n  ([key, value]) => [key, value * 2]\n);",
        "tags": "object, mapping, transformation, functional, javascript"
    },
    {
        "title": "Implementing a Simple State Machine",
        "summary": "const createStateMachine = (initialState, transitions) => { };",
        "description": "Creates a basic state machine with predefined state transitions and validation.",
        "example": "const trafficLight = createStateMachine('red', {\n  red: { next: 'green' },\n  green: {      next: 'yellow' },\n  yellow: { next: 'red' }\n});",
        "tags": "state machine, state, design pattern, logic, javascript"
    },
    {
        "title": "Creating a Fluent Interface for Object Configuration",
        "summary": "class ConfigBuilder { withX().withY().build(); }",
        "description": "Implements a fluent interface pattern for creating complex objects with method           chaining.",
        "example": "class UserBuilder {\n  constructor() { this.user = {}; }\n  withName(name) {\n               this.user.name = name;\n    return this;\n  }\n  build() { return this.user; }\n}",
        "tags": "fluent interface, builder, design pattern, chaining, javascript"
    },
    {
        "title": "Implementing a Simple Pub/Sub Pattern",
        "summary": "const createPubSub = () => { const subscribers = {}; };",
        "description": "Creates a basic publish-subscribe mechanism for decoupled event handling.",
        "example": "const eventBus = createPubSub();\neventBus.subscribe('user:login', (data) =>                 {});\neventBus.publish('user:login', { userId: 123 });",
        "tags": "pub/sub, events, design pattern, communication, javascript"
    },
    {
        "title": "Creating a Recursive Flatten Function",
        "summary": "const flattenDeep = (arr) => arr.reduce((acc, val) => [], []);",
        "description": "Implements a deep flattening function that can handle nested arrays of arbitrary         depth.",
        "example": "const nestedArray = [1, [2, [3, [4]]], 5];\nconst flattened = flattenDeep(nestedArray);",
        "tags": "flatten, recursive, array, transformation, javascript"
    },
    {
        "title": "Implementing Structural Equality Comparison",
        "summary": "const isDeepEqual = (obj1, obj2) => { };",
        "description": "Creates a function to perform deep equality comparison between complex objects.",
        "example": "const result = isDeepEqual(\n  { a: 1, b: { c: 2 } },\n  { a: 1, b: { c: 2 } }\n);",
        "tags": "comparison, deep equal, object, utility, javascript"
    },
    {
        "title": "Creating a Simple Dependency Injection Container",
        "summary": "const createContainer = () => { const services = new Map(); };",
        "description": "Implements a basic dependency injection container for managing and resolving             dependencies.",
        "example": "const container = createContainer();\ncontainer.register('logger', () => new                 Logger());\nconst logger = container.resolve('logger');",
        "tags": "dependency injection, container, design pattern, inversion of control, javascript"
    },
    {
        "title": "Implementing a Compose with Async Support",
        "summary": "const composeAsync = (...fns) => x => fns.reduceRight((p, f) => p.then(f),                   Promise.resolve(x));",
        "description": "Creates an async-aware function composition utility for handling promise-based function  chains.",
        "example": "const fetchUser = async (id) => {};\nconst processUser = async (user) => {};\nconst          composedOperation = composeAsync(processUser, fetchUser);",
        "tags": "async, composition, functional, promise, javascript"
    }
]