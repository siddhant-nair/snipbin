[
    {
        "title": "Logging Messages to the Console",
        "summary": "console.log(message);\nconsole.warn(message);\nconsole.error(error);",
        "description": "Prints messages to the console with different log levels: log, warn, and error.",
        "example": "console.log('Hello world!');\nconsole.warn('hello %s', 'CheatSheets.zip');\nconsole.error(new Error('Oops!'));",
        "tags": "console, log, debug, error, warning, message, javascript"
    },
    {
        "title": "Declaring Numbers in JavaScript",
        "summary": "let number = integer;\nlet price = float;",
        "description": "Defines numbers in JavaScript as either integers or floating-point values.",
        "example": "let amount = 6;\nlet price = 4.99;",
        "tags": "number, integer, float, decimal, variable, javascript"
    },
    {
        "title": "Declaring Variables in JavaScript",
        "summary": "let variableName = value;\nconst constantName = value;\nvar oldVariable = value;",
        "description": "Declares variables using let, const, or var, each with different scoping rules.",
        "example": "let x = null;\nlet name = 'Tammy';\nconst found = false;\nconsole.log(name, found, x);\nvar a;\nconsole.log(a); // undefined",
        "tags": "variable, let, const, var, null, undefined, boolean, javascript"
    },
    {
        "title": "Finding the Length of a String",
        "summary": "const length = string.length;",
        "description": "Gets the number of characters in a string.",
        "example": "let text = 'Hello, World!';\nconsole.log(text.length); // 13",
        "tags": "string, length, count, characters, javascript"
    },
    {
        "title": "Using Arithmetic Operators in JavaScript",
        "summary": "let result = a + b;\nresult = a - b;\nresult = a * b;\nresult = a / b;\nresult = a % b;",
        "description": "Performs arithmetic operations including addition, subtraction, multiplication, division, and modulo.",
        "example": "let sum = 5 + 5;\nlet difference = 10 - 5;\nlet product = 5 * 10;\nlet quotient = 10 / 5;\nlet remainder = 10 % 3;",
        "tags": "arithmetic, addition, subtraction, multiplication, division, modulo, javascript"
    },
    {
        "title": "Writing Comments in JavaScript",
        "summary": "// Single-line comment\n/* Multi-line comment */",
        "description": "Uses `//` for single-line comments and `/* */` for multi-line comments.",
        "example": "// This is a single-line comment\n/* This is a\nmulti-line comment */",
        "tags": "comment, documentation, single-line, multi-line, javascript"
    },
    {
        "title": "Using Assignment Operators in JavaScript",
        "summary": "variable = value;\nvariable += increment;",
        "description": "Assigns values to variables and updates them using shorthand assignment operators.",
        "example": "let number = 100;\nnumber += 10;\nconsole.log(number); // 110",
        "tags": "assignment, operator, increment, update, javascript"
    },
    {
        "title": "Interpolating Strings Using Template Literals",
        "summary": "const message = `Text ${variable}`;",
        "description": "Uses template literals (backticks) to embed variables inside strings.",
        "example": "let age = 7;\nconsole.log(`Tommy is ${age} years old.`);",
        "tags": "string, interpolation, template literals, backticks, javascript"
    },
    {
        "title": "Declaring a Variable with let in JavaScript",
        "summary": "let variableName;",
        "description": "Declares a block-scoped variable using `let`.",
        "example": "let count;\nconsole.log(count); // undefined\ncount = 10;\nconsole.log(count); // 10",
        "tags": "variable, let, declaration, block scope, javascript"
    },
    {
        "title": "Declaring a Constant with const in JavaScript",
        "summary": "const constantName = value;",
        "description": "Declares a constant whose value cannot be reassigned.",
        "example": "const numberOfColumns = 4;\n// numberOfColumns = 8; // TypeError",
        "tags": "constant, const, immutable, declaration, javascript"
    },
    {
        "title": "Using an if Statement in JavaScript",
        "summary": "if (condition) { statement; }",
        "description": "Executes a block of code only if the condition is true.",
        "example": "const isMailSent = true;\nif (isMailSent) {\n  console.log('Mail sent to recipient');\n}",
        "tags": "if statement, condition, boolean, control flow, javascript"
    },
    {
        "title": "Using the Ternary Operator in JavaScript",
        "summary": "const result = condition ? valueIfTrue : valueIfFalse;",
        "description": "Uses a concise syntax for conditional expressions.",
        "example": "let x = 1;\nlet result = x === 1 ? 'Yes' : 'No';\nconsole.log(result); // 'Yes'",
        "tags": "ternary, conditional, operator, shorthand, javascript"
    },
    {
        "title": "Using Logical OR Operator in JavaScript",
        "summary": "const result = value1 || value2;",
        "description": "Returns the first truthy value or the last falsy value.",
        "example": "console.log(true || false); // true\nconsole.log(10 > 5 || 10 > 20); // true",
        "tags": "logical OR, boolean, condition, operator, javascript"
    },
    {
        "title": "Using Logical AND Operator in JavaScript",
        "summary": "const result = value1 && value2;",
        "description": "Returns the first falsy value or the last truthy value.",
        "example": "console.log(true && true); // true\nconsole.log(1 > 2 && 2 > 1); // false",
        "tags": "logical AND, boolean, condition, operator, javascript"
    },
    {
        "title": "Using Logical NOT Operator in JavaScript",
        "summary": "const result = !value;",
        "description": "Negates a boolean value, converting truthy values to false and falsy values to true.",
        "example": "let lateToWork = true;\nlet oppositeValue = !lateToWork;\nconsole.log(oppositeValue); // false",
        "tags": "logical NOT, boolean, negate, condition, javascript"
    },
    {
        "title": "Using Comparison Operators in JavaScript",
        "summary": "const result = a > b;\nresult = a < b;\nresult = a >= b;\nresult = a <= b;\nresult = a === b;\nresult = a !== b;",
        "description": "Compares two values and returns a boolean result.",
        "example": "console.log(1 > 3); // false\nconsole.log(3 > 1); // true\nconsole.log(1 === '1'); // false",
        "tags": "comparison, greater than, less than, equality, operator, javascript"
    },
    {
        "title": "Using the Nullish Coalescing Operator in JavaScript",
        "summary": "const result = value ?? defaultValue;",
        "description": "Returns the right-hand value if the left-hand value is null or undefined.",
        "example": "const message = null ?? 'Hello';\nconsole.log(message); // 'Hello'",
        "tags": "nullish, coalescing, operator, javascript, undefined, default"
    },
    {
        "title": "Using else if Statement in JavaScript",
        "summary": "if (condition1) { ... } else if (condition2) { ... } else { ... }",
        "description": "Executes different code blocks based on multiple conditions.",
        "example": "const num = 15;\nif (num > 20) {\n  console.log('Large');\n} else if (num > 10) {\n  console.log('Medium');\n} else {\n  console.log('Small');\n}\n// 'Medium'",
        "tags": "if, else if, conditionals, branching, javascript, statement"
    },
    {
        "title": "Using switch Statement in JavaScript",
        "summary": "switch (expression) { case value1: ... break; default: ... }",
        "description": "Executes different code blocks based on the value of an expression.",
        "example": "const food = 'pizza';\nswitch (food) {\n  case 'apple':\n    console.log('Fruit');\n    break;\n  case 'pizza':\n    console.log('Fast food');\n    break;\n  default:\n    console.log('Unknown');\n}\n// 'Fast food'",
        "tags": "switch, case, conditionals, javascript, statement, branching"
    },
    {
        "title": "Understanding == vs === in JavaScript",
        "summary": "Use == for loose equality and === for strict equality.",
        "description": "The == operator compares values after type conversion, whereas === checks both value and type.",
        "example": "console.log(0 == false); // true\nconsole.log(0 === false); // false",
        "tags": "equality, strict equality, loose equality, javascript, comparison"
    },
    {
        "title": "Defining and Calling Functions in JavaScript",
        "summary": "function functionName(parameters) { return value; }",
        "description": "Defines a reusable block of code using functions.",
        "example": "function sum(a, b) {\n  return a + b;\n}\nconsole.log(sum(3, 5)); // 8",
        "tags": "function, javascript, define, call, return, parameters"
    },
    {
        "title": "Using Anonymous Functions in JavaScript",
        "summary": "const variableName = function(parameters) { return value; };",
        "description": "Defines functions without a name and assigns them to a variable.",
        "example": "const greet = function(name) {\n  return `Hello, ${name}`;\n};\nconsole.log(greet('Alice')); // 'Hello, Alice'",
        "tags": "anonymous, function, javascript, variable, expression"
    },
    {
        "title": "Using Arrow Functions in JavaScript",
        "summary": "const functionName = (parameters) => { return value; };",
        "description": "Defines functions using ES6 arrow syntax, making them more concise.",
        "example": "const square = (num) => num * num;\nconsole.log(square(4)); // 16",
        "tags": "arrow function, es6, javascript, lambda, shorthand"
    },
    {
        "title": "Using the return Keyword in JavaScript",
        "summary": "return value;",
        "description": "Specifies the value a function should return.",
        "example": "function multiply(a, b) {\n  return a * b;\n}\nconsole.log(multiply(4, 5)); // 20",
        "tags": "return, function, javascript, value, output"
    },
    {
        "title": "Calling a Function in JavaScript",
        "summary": "functionName(arguments);",
        "description": "Executes a function and passes arguments if required.",
        "example": "function greet(name) {\n  return `Hello, ${name}`;\n}\nconsole.log(greet('Bob')); // 'Hello, Bob'",
        "tags": "call, function, javascript, execute, arguments"
    },
    {
        "title": "Using Function Expressions in JavaScript",
        "summary": "const variableName = function(parameters) { return value; };",
        "description": "Defines functions as expressions and assigns them to variables.",
        "example": "const add = function(a, b) {\n  return a + b;\n};\nconsole.log(add(2, 3)); // 5",
        "tags": "function, expression, javascript, variable, assignment"
    },
    {
        "title": "Defining Function Parameters in JavaScript",
        "summary": "function functionName(parameter1, parameter2) { return value; }",
        "description": "Specifies input values that a function can accept.",
        "example": "function greet(name) {\n  return `Hello, ${name}!`;\n}\nconsole.log(greet('John')); // 'Hello, John!'",
        "tags": "function, parameter, input, javascript, argument"
    },
    {
        "title": "Declaring a Function in JavaScript",
        "summary": "function add(num1, num2) { return num1 + num2; }",
        "description": "Defines a reusable block of code using a function declaration.",
        "example": "function add(num1, num2) {\n  return num1 + num2;\n}\nconsole.log(add(5, 3)); // 8",
        "tags": "function, declare, declaration, define, javascript"
    },
    {
        "title": "Understanding Scope in JavaScript",
        "summary": "var pizzaName = 'Margarita';",
        "description": "Variables defined inside a function are local, while those outside are global.",
        "example": "function myFunction() {\n  var pizzaName = 'Margarita';\n  // Code here can use pizzaName\n}\n// Code here can't use pizzaName",
        "tags": "scope, variable, function, local, global, javascript"
    },
    {
        "title": "Using Block Scoped Variables in JavaScript",
        "summary": "const statusMessage = 'Logged in.';",
        "description": "Variables inside a block `{}` cannot be accessed outside of it.",
        "example": "const isLoggedIn = true;\nif (isLoggedIn) {\n  const statusMessage = 'Logged in.';\n}\n// console.log(statusMessage); // ReferenceError",
        "tags": "block scope, let, const, variable, javascript"
    },
    {
        "title": "Using Global Variables in JavaScript",
        "summary": "const color = 'blue';",
        "description": "Global variables can be accessed anywhere in the script.",
        "example": "const color = 'blue';\nfunction printColor() {\n  console.log(color);\n}\nprintColor(); // 'blue'",
        "tags": "global variable, scope, javascript"
    },
    {
        "title": "Difference Between let and var in JavaScript",
        "summary": "let i = 0;\nvar j = 0;",
        "description": "let is block-scoped while var is function-scoped.",
        "example": "for (let i = 0; i < 3; i++) {}\n// console.log(i); // ReferenceError\n\nfor (var j = 0; j < 3; j++) {}\nconsole.log(j); // 3",
        "tags": "let, var, scope, function scope, block scope, javascript"
    },
    {
        "title": "Fixing Loop Closure Issues in JavaScript",
        "summary": "for (let j = 0; j < 3; j++) { setTimeout(() => console.log(j), 10); }",
        "description": "Using let ensures each iteration has its own scope.",
        "example": "for (let j = 0; j < 3; j++) {\n  setTimeout(() => console.log(j), 10);\n} // Prints 0, 1, 2",
        "tags": "loop, closure, setTimeout, let, var, javascript"
    },
    {
        "title": "Creating an Array in JavaScript",
        "summary": "const fruits = ['apple', 'orange', 'banana'];",
        "description": "Arrays can store multiple values in a single variable.",
        "example": "const fruits = ['apple', 'orange', 'banana'];",
        "tags": "array, create, javascript, list, elements"
    },
    {
        "title": "Getting the Length of an Array in JavaScript",
        "summary": "const length = array.length;",
        "description": "Use the .length property to get the number of elements in an array.",
        "example": "const numbers = [1, 2, 3, 4];\nconsole.log(numbers.length); // 4",
        "tags": "array, length, size, count, javascript"
    },
    {
        "title": "Accessing Elements in an Array in JavaScript",
        "summary": "const element = array[index];",
        "description": "Retrieve elements from an array using their index.",
        "example": "const myArray = [100, 200, 300];\nconsole.log(myArray[0]); // 100",
        "tags": "array, index, access, element, javascript"
    },
    {
        "title": "Adding Elements to the End of an Array in JavaScript",
        "summary": "array.push(element);",
        "description": "The push method adds elements to the end of an array.",
        "example": "const cart = ['apple', 'orange'];\ncart.push('pear');",
        "tags": "array, push, add, javascript"
    },
    {
        "title": "Adding Elements to a Set in JavaScript",
        "summary": "set.add(value);",
        "description": "Adds unique values to a Set. Duplicate values are ignored.",
        "example": "const mySet = new Set();\nmySet.add('a');\nmySet.add(1);\nmySet.add(true);\nconsole.log(mySet); // Set { 'a', 1, true }",
        "tags": "set, add, insert, unique, javascript"
    },
    {
        "title": "Removing Elements from a Set in JavaScript",
        "summary": "set.delete(value);",
        "description": "Removes a specific value from a Set.",
        "example": "const mySet = new Set([1, 'a', true]);\nmySet.delete('a');\nconsole.log(mySet); // Set { 1, true }",
        "tags": "set, delete, remove, clear, javascript"
    },
    {
        "title": "Checking If a Set Contains a Value in JavaScript",
        "summary": "const exists = set.has(value);",
        "description": "Returns true if the value exists in the Set, otherwise false.",
        "example": "const mySet = new Set([1, 'a', true]);\nconsole.log(mySet.has('a')); // true\nconsole.log(mySet.has(false)); // false",
        "tags": "set, has, contains, check, javascript"
    },
    {
        "title": "Clearing All Elements from a Set in JavaScript",
        "summary": "set.clear();",
        "description": "Removes all elements from a Set.",
        "example": "const mySet = new Set([1, 'a', true]);\nconsole.log(mySet.size); // 3\nmySet.clear();\nconsole.log(mySet.size); // 0",
        "tags": "set, clear, empty, reset, javascript"
    },
    {
        "title": "Getting the Size of a Set in JavaScript",
        "summary": "const size = set.size;",
        "description": "Returns the number of elements in a Set.",
        "example": "const mySet = new Set([1, 'a', true]);\nconsole.log(mySet.size); // 3",
        "tags": "set, size, length, count, javascript"
    },
    {
        "title": "Iterating Over a Set in JavaScript",
        "summary": "set.forEach(callback);",
        "description": "Executes a provided function once for each value in the Set.",
        "example": "const mySet = new Set([1, 'a', true]);\nmySet.forEach(value => console.log(value));\n// Output:\n// 1\n// 'a'\n// true",
        "tags": "set, loop, iterate, foreach, javascript"
    },
    {
        "title": "Using a While Loop in JavaScript",
        "summary": "while (condition) { // code }",
        "description": "Executes a block of code while a specified condition is true.",
        "example": "let i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}\n// Output: 0 1 2 3 4",
        "tags": "loop, while, iteration, repeat, javascript"
    },
    {
        "title": "Reversing a Loop in JavaScript",
        "summary": "for (let i = array.length - 1; i >= 0; i--) { // code }",
        "description": "Loops through an array in reverse order.",
        "example": "const fruits = ['apple', 'orange', 'banana'];\nfor (let i = fruits.length - 1; i >= 0; i--) {\n  console.log(`${i}: ${fruits[i]}`);\n}\n// Output:\n// 2: banana\n// 1: orange\n// 0: apple",
        "tags": "loop, reverse, iterate, for, javascript"
    },
    {
        "title": "Using a Do...While Loop in JavaScript",
        "summary": "do { // code } while (condition);",
        "description": "Executes a block of code at least once before checking the condition.",
        "example": "let i = 0;\ndo {\n  console.log(i);\n  i++;\n} while (i < 5);\n// Output: 0 1 2 3 4",
        "tags": "loop, do while, repeat, iteration, javascript"
    },
    {
        "title": "Using a For Loop in JavaScript",
        "summary": "for (let i = 0; i < n; i++) { // code }",
        "description": "Executes a block of code a specific number of times.",
        "example": "for (let i = 0; i < 4; i++) {\n  console.log(i);\n}\n// Output: 0 1 2 3",
        "tags": "loop, for, iterate, count, javascript"
    },
    {
        "title": "Looping Through an Array in JavaScript",
        "summary": "for (let i = 0; i < array.length; i++) { // code }",
        "description": "Iterates over an array using a traditional for loop.",
        "example": "const numbers = [10, 20, 30];\nfor (let i = 0; i < numbers.length; i++) {\n  console.log(numbers[i]);\n}\n// Output: 10 20 30",
        "tags": "loop, array, iterate, for, javascript"
    },
    {
        "title": "Breaking a Loop in JavaScript",
        "summary": "if (condition) { break; }",
        "description": "Exits a loop immediately when a condition is met.",
        "example": "for (let i = 0; i < 10; i++) {\n  if (i > 5) break;\n  console.log(i);\n}\n// Output: 0 1 2 3 4 5",
        "tags": "loop, break, exit, stop, javascript"
    },
    {
        "title": "Continuing to the Next Iteration in JavaScript",
        "summary": "if (condition) { continue; }",
        "description": "Skips the current iteration and moves to the next one.",
        "example": "for (let i = 0; i < 5; i++) {\n  if (i === 2) continue;\n  console.log(i);\n}\n// Output: 0 1 3 4",
        "tags": "loop, continue, skip, iteration, javascript"
    },
    {
        "title": "Using a Nested Loop in JavaScript",
        "summary": "for (let i = 0; i < n; i++) { for (let j = 0; j < m; j++) { // code } }",
        "description": "Loops within another loop for multi-level iteration.",
        "example": "for (let i = 0; i < 2; i++) {\n  for (let j = 0; j < 3; j++) {\n    console.log(`${i}-${j}`);\n  }\n}\n// Output:\n// 0-0\n// 0-1\n// 0-2\n// 1-0\n// 1-1\n// 1-2",
        "tags": "loop, nested, multiple, iteration, javascript"
    },

    {
        "title": "Adding Elements to a Set in JavaScript",
        "summary": "set.add(value);",
        "description": "Adds unique values to a Set. Duplicate values are ignored.",
        "example": "const mySet = new Set();\nmySet.add('a');\nmySet.add(1);\nmySet.add(true);\nconsole.log(mySet); // Set { 'a', 1, true }",
        "tags": "set, add, insert, unique, javascript"
    },
    {
        "title": "Removing Elements from a Set in JavaScript",
        "summary": "set.delete(value);",
        "description": "Removes a specific value from a Set.",
        "example": "const mySet = new Set([1, 'a', true]);\nmySet.delete('a');\nconsole.log(mySet); // Set { 1, true }",
        "tags": "set, delete, remove, clear, javascript"
    },
    {
        "title": "Checking If a Set Contains a Value in JavaScript",
        "summary": "const exists = set.has(value);",
        "description": "Returns true if the value exists in the Set, otherwise false.",
        "example": "const mySet = new Set([1, 'a', true]);\nconsole.log(mySet.has('a')); // true\nconsole.log(mySet.has(false)); // false",
        "tags": "set, has, contains, check, javascript"
    },
    {
        "title": "Clearing All Elements from a Set in JavaScript",
        "summary": "set.clear();",
        "description": "Removes all elements from a Set.",
        "example": "const mySet = new Set([1, 'a', true]);\nconsole.log(mySet.size); // 3\nmySet.clear();\nconsole.log(mySet.size); // 0",
        "tags": "set, clear, empty, reset, javascript"
    },
    {
        "title": "Getting the Size of a Set in JavaScript",
        "summary": "const size = set.size;",
        "description": "Returns the number of elements in a Set.",
        "example": "const mySet = new Set([1, 'a', true]);\nconsole.log(mySet.size); // 3",
        "tags": "set, size, length, count, javascript"
    },
    {
        "title": "Iterating Over a Set in JavaScript",
        "summary": "set.forEach(callback);",
        "description": "Executes a provided function once for each value in the Set.",
        "example": "const mySet = new Set([1, 'a', true]);\nmySet.forEach(value => console.log(value));\n// Output:\n// 1\n// 'a'\n// true",
        "tags": "set, loop, iterate, foreach, javascript"
    },
    {
        "title": "Using a While Loop in JavaScript",
        "summary": "while (condition) { // code }",
        "description": "Executes a block of code while a specified condition is true.",
        "example": "let i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}\n// Output: 0 1 2 3 4",
        "tags": "loop, while, iteration, repeat, javascript"
    },
    {
        "title": "Reversing a Loop in JavaScript",
        "summary": "for (let i = array.length - 1; i >= 0; i--) { // code }",
        "description": "Loops through an array in reverse order.",
        "example": "const fruits = ['apple', 'orange', 'banana'];\nfor (let i = fruits.length - 1; i >= 0; i--) {\n  console.log(`${i}: ${fruits[i]}`);\n}\n// Output:\n// 2: banana\n// 1: orange\n// 0: apple",
        "tags": "loop, reverse, iterate, for, javascript"
    },
    {
        "title": "Using a Do...While Loop in JavaScript",
        "summary": "do { // code } while (condition);",
        "description": "Executes a block of code at least once before checking the condition.",
        "example": "let i = 0;\ndo {\n  console.log(i);\n  i++;\n} while (i < 5);\n// Output: 0 1 2 3 4",
        "tags": "loop, do while, repeat, iteration, javascript"
    },
    {
        "title": "Using a For Loop in JavaScript",
        "summary": "for (let i = 0; i < n; i++) { // code }",
        "description": "Executes a block of code a specific number of times.",
        "example": "for (let i = 0; i < 4; i++) {\n  console.log(i);\n}\n// Output: 0 1 2 3",
        "tags": "loop, for, iterate, count, javascript"
    },
    {
        "title": "Looping Through an Array in JavaScript",
        "summary": "for (let i = 0; i < array.length; i++) { // code }",
        "description": "Iterates over an array using a traditional for loop.",
        "example": "const numbers = [10, 20, 30];\nfor (let i = 0; i < numbers.length; i++) {\n  console.log(numbers[i]);\n}\n// Output: 10 20 30",
        "tags": "loop, array, iterate, for, javascript"
    },
    {
        "title": "Breaking a Loop in JavaScript",
        "summary": "if (condition) { break; }",
        "description": "Exits a loop immediately when a condition is met.",
        "example": "for (let i = 0; i < 10; i++) {\n  if (i > 5) break;\n  console.log(i);\n}\n// Output: 0 1 2 3 4 5",
        "tags": "loop, break, exit, stop, javascript"
    },
    {
        "title": "Continuing to the Next Iteration in JavaScript",
        "summary": "if (condition) { continue; }",
        "description": "Skips the current iteration and moves to the next one.",
        "example": "for (let i = 0; i < 5; i++) {\n  if (i === 2) continue;\n  console.log(i);\n}\n// Output: 0 1 3 4",
        "tags": "loop, continue, skip, iteration, javascript"
    },
    {
        "title": "Using a Nested Loop in JavaScript",
        "summary": "for (let i = 0; i < n; i++) { for (let j = 0; j < m; j++) { // code } }",
        "description": "Loops within another loop for multi-level iteration.",
        "example": "for (let i = 0; i < 2; i++) {\n  for (let j = 0; j < 3; j++) {\n    console.log(`${i}-${j}`);\n  }\n}\n// Output:\n// 0-0\n// 0-1\n// 0-2\n// 1-0\n// 1-1\n// 1-2",
        "tags": "loop, nested, multiple, iteration, javascript"
    },
    {
        "title": "Using Valid Property Names in an Object",
        "summary": "const obj = { 'valid key': 123, '+specialKey': 'value' };",
        "description": "JavaScript object keys must be valid identifiers unless enclosed in quotes.",
        "example": "const trainSchedule = {\n  'platform num': 10,\n  '+compartment': 'C'\n};\nconsole.log(trainSchedule['platform num']); // 10",
        "tags": "object, property, keys, naming, javascript"
    },
    {
        "title": "Accessing Non-Existent Properties in an Object",
        "summary": "const value = obj.missingKey;",
        "description": "If you try to access an object property that does not exist, JavaScript returns undefined.",
        "example": "const classElection = { date: 'January 12' };\nconsole.log(classElection.place); // undefined",
        "tags": "object, property, undefined, access, javascript"
    },
    {
        "title": "Modifying and Deleting Object Properties",
        "summary": "delete obj.property; obj.newProperty = 'value';",
        "description": "Object properties can be modified or deleted, but reassigning an entire object declared with const is not allowed.",
        "example": "const student = { name: 'Sheldon', score: 100, grade: 'A' };\ndelete student.score;\nstudent.grade = 'F';\nconsole.log(student); // { name: 'Sheldon', grade: 'F' }",
        "tags": "object, modify, delete, properties, javascript"
    },
    {
        "title": "Using Object Property Shorthand in JavaScript",
        "summary": "const obj = { key };",
        "description": "When defining an object, you can use shorthand notation if the property name matches the variable name.",
        "example": "const activity = 'Surfing';\nconst beach = { activity };\nconsole.log(beach); // { activity: 'Surfing' }",
        "tags": "object, shorthand, properties, javascript"
    },
    {
        "title": "Destructuring an Object in JavaScript",
        "summary": "const { key1, key2 } = obj;",
        "description": "Destructuring syntax allows you to unpack values from objects into distinct variables.",
        "example": "const person = { name: 'Tom', age: '22' };\nconst { name, age } = person;\nconsole.log(name); // 'Tom'",
        "tags": "object, destructuring, properties, variables, javascript"
    },
    {
        "title": "Using the Delete Operator in JavaScript",
        "summary": "delete obj.key;",
        "description": "The delete operator removes a property from an object.",
        "example": "const person = { firstName: 'Matilda', age: 27, hobby: 'knitting' };\ndelete person.hobby;\nconsole.log(person); // { firstName: 'Matilda', age: 27 }",
        "tags": "object, delete, remove, properties, javascript"
    },
    {
        "title": "Passing Objects as Function Arguments",
        "summary": "function modify(obj) { obj.key = 'newValue'; }",
        "description": "Objects are passed by reference in JavaScript, meaning changes inside a function persist outside.",
        "example": "const origObj = { color: 'blue' };\nconst changeItUp = (obj) => { obj.color = 'red'; };\nchangeItUp(origObj);\nconsole.log(origObj.color); // 'red'",
        "tags": "object, function, arguments, reference, javascript"
    },
    {
        "title": "Using Object Methods in JavaScript",
        "summary": "const obj = { method() { return 'Hello'; } };",
        "description": "An object method is a function stored as a property inside an object.",
        "example": "const engine = {\n  start(adverb) { console.log(`The engine starts ${adverb}...`); },\n  sputter: () => console.log('The engine sputters...')\n};\nengine.start('noisily');",
        "tags": "object, method, function, javascript"
    },
    {
        "title": "Using the 'this' Keyword in JavaScript Objects",
        "summary": "const obj = { key: 'value', method() { return this.key; } };",
        "description": "The 'this' keyword in an object refers to the object itself.",
        "example": "const cat = { name: 'Pipey', age: 8, whatName() { return this.name; } };\nconsole.log(cat.whatName()); // 'Pipey'",
        "tags": "object, this, method, properties, javascript"
    },
    {
        "title": "Using Factory Functions to Create Objects",
        "summary": "const factory = (key) => ({ key });",
        "description": "Factory functions return new objects dynamically with specified properties.",
        "example": "const dogFactory = (name, age, breed) => ({ name, age, breed, bark() { console.log('Woof!'); } });\nconst dog = dogFactory('Max', 3, 'Beagle');\ndog.bark();",
        "tags": "object, factory function, constructor, javascript"
    },
    {
        "title": "Using JavaScript Classes",
        "summary": "class MyClass { constructor(prop) { this.prop = prop; } }",
        "description": "Classes in JavaScript provide a structured way to create objects.",
        "example": "class Song { constructor(title, artist) { this.title = title; this.artist = artist; } }\nconst mySong = new Song('Bohemian Rhapsody', 'Queen');\nconsole.log(mySong.title);",
        "tags": "class, constructor, javascript, OOP"
    },
    {
        "title": "Using Static Methods in JavaScript Classes",
        "summary": "class MyClass { static method() { return 'Hello'; } }",
        "description": "Static methods belong to the class itself, not instances of the class.",
        "example": "class Dog {\n  static bark() { console.log('Woof!'); }\n}\nDog.bark();",
        "tags": "class, static, method, javascript"
    },
    {
        "title": "Using Class Methods in JavaScript",
        "summary": "class MyClass { method() { return 'Hello'; } }",
        "description": "Class methods define functions that operate on instances of a class.",
        "example": "class Song { play() { console.log('Playing!'); } stop() { console.log('Stopping!'); } }\nconst mySong = new Song();\nmySong.play();",
        "tags": "class, method, function, javascript"
    },
    {
        "title": "Using Class Inheritance in JavaScript",
        "summary": "class Child extends Parent { constructor() { super(); } }",
        "description": "JavaScript classes support inheritance using the 'extends' keyword.",
        "example": "class Media { constructor(info) { this.publishDate = info.publishDate; this.name = info.name; } }\nclass Song extends Media { constructor(songData) { super(songData); this.artist = songData.artist; } }\nconst mySong = new Song({ artist: 'Queen', name: 'Bohemian Rhapsody', publishDate: 1975 });",
        "tags": "class, inheritance, extends, super, javascript"
    }
]
